CFLAGS	Makefile	/^CFLAGS=-std=gnu99$/;"	m
VERSION	Makefile	/^VERSION = 3$/;"	m
PATCHLEVEL	Makefile	/^PATCHLEVEL = 14$/;"	m
SUBLEVEL	Makefile	/^SUBLEVEL = 27$/;"	m
EXTRAVERSION	Makefile	/^EXTRAVERSION =$/;"	m
NAME	Makefile	/^NAME = Remembering Coco$/;"	m
LC_COLLATE	Makefile	/^LC_COLLATE=C$/;"	m
LC_NUMERIC	Makefile	/^LC_NUMERIC=C$/;"	m
KBUILD_VERBOSE	Makefile	/^  KBUILD_VERBOSE = $(V)$/;"	m
KBUILD_VERBOSE	Makefile	/^  KBUILD_VERBOSE = 0$/;"	m
KBUILD_CHECKSRC	Makefile	/^  KBUILD_CHECKSRC = $(C)$/;"	m
KBUILD_CHECKSRC	Makefile	/^  KBUILD_CHECKSRC = 0$/;"	m
KBUILD_EXTMOD	Makefile	/^  KBUILD_EXTMOD ?= $(SUBDIRS)$/;"	m
KBUILD_EXTMOD	Makefile	/^  KBUILD_EXTMOD := $(M)$/;"	m
KBUILD_OUTPUT	Makefile	/^  KBUILD_OUTPUT := $(O)$/;"	m
KBUILD_ENABLE_EXTRA_GCC_CHECKS	Makefile	/^  export KBUILD_ENABLE_EXTRA_GCC_CHECKS := $(W)$/;"	m
PHONY	Makefile	/^PHONY := _all$/;"	m
saved-output	Makefile	/^saved-output := $(KBUILD_OUTPUT)$/;"	m
KBUILD_OUTPUT	Makefile	/^KBUILD_OUTPUT := $(shell cd $(KBUILD_OUTPUT) && \/bin\/pwd)$/;"	m
skip-makefile	Makefile	/^skip-makefile := 1$/;"	m
srctree	Makefile	/^srctree		:= $(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))$/;"	m
objtree	Makefile	/^objtree		:= $(CURDIR)$/;"	m
src	Makefile	/^src		:= $(srctree)$/;"	m
obj	Makefile	/^obj		:= $(objtree)$/;"	m
VPATH	Makefile	/^VPATH		:= $(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))$/;"	m
SUBARCH	Makefile	/^SUBARCH := $(shell uname -m | sed -e s\/i.86\/x86\/ -e s\/x86_64\/x86\/ \\$/;"	m
KBUILD_BUILDHOST	Makefile	/^export KBUILD_BUILDHOST := $(SUBARCH)$/;"	m
ARCH	Makefile	/^ARCH		?=arm64$/;"	m
CROSS_COMPILE	Makefile	/^CROSS_COMPILE	?=..\/aarch64-linux-android-4.8\/bin\/aarch64-linux-android-$/;"	m
UTS_MACHINE	Makefile	/^UTS_MACHINE 	:= $(ARCH)$/;"	m
SRCARCH	Makefile	/^SRCARCH 	:= $(ARCH)$/;"	m
SRCARCH	Makefile	/^        SRCARCH := x86$/;"	m
SRCARCH	Makefile	/^        SRCARCH := x86$/;"	m
SRCARCH	Makefile	/^       SRCARCH := sparc$/;"	m
SRCARCH	Makefile	/^       SRCARCH := sparc$/;"	m
SRCARCH	Makefile	/^       SRCARCH := sh$/;"	m
SRCARCH	Makefile	/^       SRCARCH := tile$/;"	m
SRCARCH	Makefile	/^       SRCARCH := tile$/;"	m
hdr-arch	Makefile	/^hdr-arch  := $(SRCARCH)$/;"	m
KCONFIG_CONFIG	Makefile	/^KCONFIG_CONFIG	?= .config$/;"	m
CONFIG_SHELL	Makefile	/^CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \\$/;"	m
HOSTCC	Makefile	/^HOSTCC       = gcc$/;"	m
HOSTCXX	Makefile	/^HOSTCXX      = g++$/;"	m
HOSTCFLAGS	Makefile	/^HOSTCFLAGS   = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer$/;"	m
HOSTCXXFLAGS	Makefile	/^HOSTCXXFLAGS = -O2$/;"	m
KBUILD_MODULES	Makefile	/^KBUILD_MODULES :=$/;"	m
KBUILD_BUILTIN	Makefile	/^KBUILD_BUILTIN := 1$/;"	m
KBUILD_BUILTIN	Makefile	/^  KBUILD_BUILTIN := $(if $(CONFIG_MODVERSIONS),1)$/;"	m
KBUILD_MODULES	Makefile	/^  KBUILD_MODULES := 1$/;"	m
KBUILD_MODULES	Makefile	/^  KBUILD_MODULES := 1$/;"	m
quiet	Makefile	/^  quiet =$/;"	m
Q	Makefile	/^  Q =$/;"	m
quiet	Makefile	/^  quiet=quiet_$/;"	m
Q	Makefile	/^  Q = @$/;"	m
quiet	Makefile	/^  quiet=silent_$/;"	m
quiet	Makefile	/^  quiet=silent_$/;"	m
AS	Makefile	/^AS		= $(CROSS_COMPILE)as$/;"	m
LD	Makefile	/^LD		= $(CROSS_COMPILE)ld$/;"	m
CC	Makefile	/^CC		= $(CROSS_COMPILE)gcc$/;"	m
CPP	Makefile	/^CPP		= $(CC) -E$/;"	m
AR	Makefile	/^AR		= $(CROSS_COMPILE)ar$/;"	m
NM	Makefile	/^NM		= $(CROSS_COMPILE)nm$/;"	m
STRIP	Makefile	/^STRIP		= $(CROSS_COMPILE)strip$/;"	m
OBJCOPY	Makefile	/^OBJCOPY		= $(CROSS_COMPILE)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP		= $(CROSS_COMPILE)objdump$/;"	m
AWK	Makefile	/^AWK		= awk$/;"	m
GENKSYMS	Makefile	/^GENKSYMS	= scripts\/genksyms\/genksyms$/;"	m
CGITINFO	Makefile	/^CGITINFO	= scripts\/cgitinfo$/;"	m
INSTALLKERNEL	Makefile	/^INSTALLKERNEL  := installkernel$/;"	m
DEPMOD	Makefile	/^DEPMOD		= \/sbin\/depmod$/;"	m
PERL	Makefile	/^PERL		= perl$/;"	m
CHECK	Makefile	/^CHECK		= sparse$/;"	m
CHECKFLAGS	Makefile	/^CHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \\$/;"	m
CFLAGS_MODULE	Makefile	/^CFLAGS_MODULE   = -Wno-unused$/;"	m
AFLAGS_MODULE	Makefile	/^AFLAGS_MODULE   =$/;"	m
LDFLAGS_MODULE	Makefile	/^LDFLAGS_MODULE  =$/;"	m
CFLAGS_KERNEL	Makefile	/^CFLAGS_KERNEL	= -Wno-unused$/;"	m
AFLAGS_KERNEL	Makefile	/^AFLAGS_KERNEL	=$/;"	m
CFLAGS_GCOV	Makefile	/^CFLAGS_GCOV	= -fprofile-arcs -ftest-coverage$/;"	m
USERINCLUDE	Makefile	/^USERINCLUDE    := \\$/;"	m
LINUXINCLUDE	Makefile	/^LINUXINCLUDE    := \\$/;"	m
KBUILD_CPPFLAGS	Makefile	/^KBUILD_CPPFLAGS := -D__KERNEL__$/;"	m
KBUILD_CFLAGS	Makefile	/^KBUILD_CFLAGS   := -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \\$/;"	m
KBUILD_AFLAGS_KERNEL	Makefile	/^KBUILD_AFLAGS_KERNEL :=$/;"	m
KBUILD_CFLAGS_KERNEL	Makefile	/^KBUILD_CFLAGS_KERNEL :=$/;"	m
KBUILD_AFLAGS	Makefile	/^KBUILD_AFLAGS   := -D__ASSEMBLY__$/;"	m
KBUILD_AFLAGS_MODULE	Makefile	/^KBUILD_AFLAGS_MODULE  := -DMODULE$/;"	m
KBUILD_CFLAGS_MODULE	Makefile	/^KBUILD_CFLAGS_MODULE  := -DMODULE$/;"	m
KBUILD_LDFLAGS_MODULE	Makefile	/^KBUILD_LDFLAGS_MODULE := -T $(srctree)\/scripts\/module-common.lds$/;"	m
KERNELRELEASE	Makefile	/^KERNELRELEASE = $(shell cat include\/config\/kernel.release 2> \/dev\/null)$/;"	m
KERNELVERSION	Makefile	/^KERNELVERSION = $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)$/;"	m
MODVERDIR	Makefile	/^export MODVERDIR := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))\/).tmp_versions$/;"	m
RCS_FIND_IGNORE	Makefile	/^RCS_FIND_IGNORE := \\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS \\$/;"	m
RCS_TAR_IGNORE	Makefile	/^export RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn \\$/;"	m
version_h	Makefile	/^version_h := include\/generated\/uapi\/linux\/version.h$/;"	m
no-dot-config-targets	Makefile	/^no-dot-config-targets := clean mrproper distclean \\$/;"	m
config-targets	Makefile	/^config-targets := 0$/;"	m
mixed-targets	Makefile	/^mixed-targets  := 0$/;"	m
dot-config	Makefile	/^dot-config     := 1$/;"	m
dot-config	Makefile	/^		dot-config := 0$/;"	m
config-targets	Makefile	/^                config-targets := 1$/;"	m
mixed-targets	Makefile	/^                        mixed-targets := 1$/;"	m
init-y	Makefile	/^init-y		:= init\/$/;"	m
drivers-y	Makefile	/^drivers-y	:= drivers\/ sound\/ firmware\/$/;"	m
net-y	Makefile	/^net-y		:= net\/$/;"	m
libs-y	Makefile	/^libs-y		:= lib\/$/;"	m
core-y	Makefile	/^core-y		:= usr\/$/;"	m
stackp-flag	Makefile	/^  stackp-flag := -fstack-protector$/;"	m
stackp-flag	Makefile	/^  stackp-flag := -fstack-protector-strong$/;"	m
stackp-flag	Makefile	/^  stackp-flag := $(call cc-option, -fno-stack-protector)$/;"	m
CC_USING_FENTRY	Makefile	/^CC_USING_FENTRY	:= $(call cc-option, -mfentry -DCC_USING_FENTRY)$/;"	m
BUILD_C_RECORDMCOUNT	Makefile	/^		BUILD_C_RECORDMCOUNT := y$/;"	m
KBUILD_ARFLAGS	Makefile	/^KBUILD_ARFLAGS := $(call ar-option,D)$/;"	m
LDFLAGS_BUILD_ID	Makefile	/^LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\\$/;"	m
KBUILD_IMAGE	Makefile	/^export KBUILD_IMAGE ?= vmlinux$/;"	m
INSTALL_PATH	Makefile	/^export	INSTALL_PATH ?= \/boot$/;"	m
MODLIB	Makefile	/^MODLIB = $(INSTALL_MOD_PATH)\/lib\/modules$/;"	m
mod_strip_cmd	Makefile	/^mod_strip_cmd = $(STRIP) --strip-debug$/;"	m
mod_strip_cmd	Makefile	/^mod_strip_cmd = $(STRIP) $(INSTALL_MOD_STRIP)$/;"	m
INSTALL_MOD_STRIP	Makefile	/^endif # INSTALL_MOD_STRIP=1$/;"	m
mod_strip_cmd	Makefile	/^mod_strip_cmd = true$/;"	m
INITRD_COMPRESS-y	Makefile	/^INITRD_COMPRESS-y                  := gzip$/;"	m
MODSECKEY	Makefile	/^MODSECKEY = .\/signing_key.priv$/;"	m
MODPUBKEY	Makefile	/^MODPUBKEY = .\/signing_key.x509$/;"	m
mod_sign_cmd	Makefile	/^mod_sign_cmd = perl $(srctree)\/scripts\/sign-file $(CONFIG_MODULE_SIG_HASH) $(MODSECKEY) $(MODPUBKEY)$/;"	m
mod_sign_cmd	Makefile	/^mod_sign_cmd = true$/;"	m
vmlinux-dirs	Makefile	/^vmlinux-dirs	:= $(patsubst %\/,%,$(filter %\/, $(init-y) $(init-m) \\$/;"	m
vmlinux-alldirs	Makefile	/^vmlinux-alldirs	:= $(sort $(vmlinux-dirs) $(patsubst %\/,%,$(filter %\/, \\$/;"	m
init-y	Makefile	/^init-y		:= $(patsubst %\/, %\/built-in.o, $(init-y))$/;"	m
core-y	Makefile	/^core-y		:= $(patsubst %\/, %\/built-in.o, $(core-y))$/;"	m
drivers-y	Makefile	/^drivers-y	:= $(patsubst %\/, %\/built-in.o, $(drivers-y))$/;"	m
net-y	Makefile	/^net-y		:= $(patsubst %\/, %\/built-in.o, $(net-y))$/;"	m
libs-y1	Makefile	/^libs-y1		:= $(patsubst %\/, %\/lib.a, $(libs-y))$/;"	m
libs-y2	Makefile	/^libs-y2		:= $(patsubst %\/, %\/built-in.o, $(libs-y))$/;"	m
libs-y	Makefile	/^libs-y		:= $(libs-y1) $(libs-y2)$/;"	m
KBUILD_VMLINUX_INIT	Makefile	/^export KBUILD_VMLINUX_INIT := $(head-y) $(init-y)$/;"	m
KBUILD_VMLINUX_MAIN	Makefile	/^export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y) $(drivers-y) $(net-y)$/;"	m
KBUILD_LDS	Makefile	/^export KBUILD_LDS          := arch\/$(SRCARCH)\/kernel\/vmlinux.lds$/;"	m
KBUILD_ALLDIRS	Makefile	/^export KBUILD_ALLDIRS := $(sort $(filter-out arch\/%,$(vmlinux-alldirs)) arch Documentation include samples scripts tools virt)$/;"	m
vmlinux-deps	Makefile	/^vmlinux-deps := $(KBUILD_LDS) $(KBUILD_VMLINUX_INIT) $(KBUILD_VMLINUX_MAIN)$/;"	m
cmd_link-vmlinux	Makefile	/^      cmd_link-vmlinux = $(CONFIG_SHELL) $< $(LD) $(LDFLAGS) $(LDFLAGS_vmlinux)$/;"	m
quiet_cmd_link-vmlinux	Makefile	/^quiet_cmd_link-vmlinux = LINK    $@$/;"	m
filechk_kernel.release	Makefile	/^define filechk_kernel.release$/;"	m
uts_len	Makefile	/^uts_len := 64$/;"	m
filechk_utsrelease.h	Makefile	/^define filechk_utsrelease.h$/;"	m
filechk_version.h	Makefile	/^define filechk_version.h$/;"	m
INSTALL_FW_PATH	Makefile	/^INSTALL_FW_PATH=$(INSTALL_MOD_PATH)\/lib\/firmware$/;"	m
INSTALL_HDR_PATH	Makefile	/^export INSTALL_HDR_PATH = $(objtree)\/usr$/;"	m
hdr-inst	Makefile	/^hdr-inst := -rR -f $(srctree)\/scripts\/Makefile.headersinst obj$/;"	m
hdr-dst	Makefile	/^hdr-dst = $(if $(KBUILD_HEADERS), dst=include\/asm-$(hdr-arch), dst=include\/asm)$/;"	m
rm-dirs	Makefile	/^clean: rm-dirs  := $(CLEAN_DIRS)$/;"	m
rm-files	Makefile	/^clean: rm-files := $(CLEAN_FILES)$/;"	m
clean-dirs	Makefile	/^clean-dirs      := $(addprefix _clean_, . $(vmlinux-alldirs) Documentation samples)$/;"	m
rm-dirs	Makefile	/^mrproper: rm-dirs  := $(wildcard $(MRPROPER_DIRS))$/;"	m
rm-files	Makefile	/^mrproper: rm-files := $(wildcard $(MRPROPER_FILES))$/;"	m
mrproper-dirs	Makefile	/^mrproper-dirs      := $(addprefix _mrproper_,Documentation\/DocBook scripts)$/;"	m
package-dir	Makefile	/^package-dir	:= $(srctree)\/scripts\/package$/;"	m
boards	Makefile	/^boards := $(wildcard $(srctree)\/arch\/$(SRCARCH)\/configs\/*_defconfig)$/;"	m
boards	Makefile	/^boards := $(notdir $(boards))$/;"	m
board-dirs	Makefile	/^board-dirs := $(dir $(wildcard $(srctree)\/arch\/$(SRCARCH)\/configs\/*\/*_defconfig))$/;"	m
board-dirs	Makefile	/^board-dirs := $(sort $(notdir $(board-dirs:\/=)))$/;"	m
help-board-dirs	Makefile	/^help-board-dirs := $(addprefix help-,$(board-dirs))$/;"	m
boards-per-dir	Makefile	/^boards-per-dir = $(notdir $(wildcard $(srctree)\/arch\/$(SRCARCH)\/configs\/$*\/*_defconfig))$/;"	m
KBUILD_MODULES	Makefile	/^KBUILD_MODULES := 1$/;"	m
module-dirs	Makefile	/^module-dirs := $(addprefix _module_,$(KBUILD_EXTMOD))$/;"	m
install-dir	Makefile	/^install-dir := $(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)$/;"	m
clean-dirs	Makefile	/^clean-dirs := $(addprefix _clean_,$(KBUILD_EXTMOD))$/;"	m
rm-dirs	Makefile	/^clean:	rm-dirs := $(MODVERDIR)$/;"	m
rm-files	Makefile	/^clean: rm-files := $(KBUILD_EXTMOD)\/Module.symvers$/;"	m
quiet_cmd_tags	Makefile	/^quiet_cmd_tags = GEN     $@$/;"	m
cmd_tags	Makefile	/^      cmd_tags = $(CONFIG_SHELL) $(srctree)\/scripts\/tags.sh $@$/;"	m
CHECKSTACK_ARCH	Makefile	/^CHECKSTACK_ARCH := $(SUBARCH)$/;"	m
CHECKSTACK_ARCH	Makefile	/^CHECKSTACK_ARCH := $(ARCH)$/;"	m
build-dir	Makefile	/^        build-dir  = $(patsubst %\/,%,$(dir $@))$/;"	m
target-dir	Makefile	/^        target-dir = $(dir $@)$/;"	m
zap-slash	Makefile	/^        zap-slash=$(filter-out .,$(patsubst %\/,%,$(dir $@)))$/;"	m
build-dir	Makefile	/^        build-dir  = $(KBUILD_EXTMOD)$(if $(zap-slash),\/$(zap-slash))$/;"	m
target-dir	Makefile	/^        target-dir = $(if $(KBUILD_EXTMOD),$(dir $<),$(dir $@))$/;"	m
quiet_cmd_rmdirs	Makefile	/^quiet_cmd_rmdirs = $(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))$/;"	m
cmd_rmdirs	Makefile	/^      cmd_rmdirs = rm -rf $(rm-dirs)$/;"	m
quiet_cmd_rmfiles	Makefile	/^quiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))$/;"	m
cmd_rmfiles	Makefile	/^      cmd_rmfiles = rm -f $(rm-files)$/;"	m
quiet_cmd_depmod	Makefile	/^quiet_cmd_depmod = DEPMOD $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$/;"	m
cmd_depmod	Makefile	/^       cmd_depmod = $(CONFIG_SHELL) $(srctree)\/scripts\/depmod.sh $(DEPMOD) \\$/;"	m
cmd_crmodverdir	Makefile	/^cmd_crmodverdir = $(Q)mkdir -p $(MODVERDIR) \\$/;"	m
targets	Makefile	/^targets := $(wildcard $(sort $(targets)))$/;"	m
cmd_files	Makefile	/^cmd_files := $(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))$/;"	m
clean	Makefile	/^clean := -f $(if $(KBUILD_SRC),$(srctree)\/)scripts\/Makefile.clean obj$/;"	m
